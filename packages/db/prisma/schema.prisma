// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model ScraperLog {
    id      Int       @id @default(autoincrement())
    start   DateTime  @default(now())
    end     DateTime?
    isError Boolean   @default(false)
    error   Json?
}

model Area {
    id   Int    @id
    name String
    code String @unique
    flag String

    competitions Competition[]
    teams        Team[]
}

model Competition {
    id     Int    @id
    name   String
    code   String @unique
    emblem String

    areaId Int

    area  Area   @relation(fields: [areaId], references: [id])
    teams Team[]
}

model Team {
    id        Int    @id
    name      String
    shortName String
    tla       String
    crest     String

    areaId        Int
    competitionId Int

    area        Area        @relation(fields: [areaId], references: [id])
    competition Competition @relation(fields: [competitionId], references: [id])
    players     Player[]
}

enum Position {
    Goalkeeper
    Defence
    Midfield
    Offence
}

model PlayerPhotosTemp {
    id    Int     @id
    name  String
    photo String?
}

model Player {
    id          Int      @id
    name        String
    position    Position
    birth       String
    nationality String
    shirtNumber Int
    photo       String?

    teamId Int

    team      Team        @relation(fields: [teamId], references: [id])
    GameGuess GameGuess[]
    Game      Game[]
}

enum GameStatus {
    Lobby
    Playing
    Ended
}

model GamePlayer {
    id   Int    @id @default(autoincrement())
    name String

    gameId Int

    game     Game        @relation(fields: [gameId], references: [id])
    guessess GameGuess[]
}

model GameGuess {
    id Int @id @default(autoincrement())

    gameId       Int
    gamePlayerId Int?
    guessId      Int

    game       Game        @relation(fields: [gameId], references: [id])
    gamePlayer GamePlayer? @relation(fields: [gamePlayerId], references: [id])
    guess      Player      @relation(fields: [guessId], references: [id])
}

model Game {
    id     Int        @id @default(autoincrement())
    code   String     @unique
    status GameStatus @default(Lobby)
    rounds Int        @default(5)

    solutionId Int

    solution    Player       @relation(fields: [solutionId], references: [id])
    gamePlayers GamePlayer[]
    guesses     GameGuess[]
}
